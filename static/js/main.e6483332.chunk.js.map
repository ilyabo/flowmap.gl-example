{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","flows","max","locationAreas","outline","normal","selected","App","state","locations","_this2","this","fetch","then","response","json","setState","_this$state","layers","push","FlowMapLayer","getLocationId","l","properties","abbr","getLocationCentroid","centroid","getFlowOriginId","f","origin","getFlowDestId","dest","getFlowMagnitude","count","showTotals","showLocationAreas","locationCircleSize","varyFlowColorByMagnitude","react_default","a","createElement","dist_esm","initialViewState","_geoViewport$viewport","geoViewport","viewport","window","innerWidth","innerHeight","undefined","_geoViewport$viewport2","Object","slicedToArray","center","longitude","latitude","zoom","getInitialViewport","controller","esm","mapboxApiAccessToken","process","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","write","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAuBMA,EAAS,CACbC,MAAO,CACLC,IAAK,WAEPC,cAAe,CACbC,QAAS,uBACTC,OAAQ,wBACRC,SAAU,yBAMOC,6MACnBC,MAAQ,CACNC,UAAW,KACXR,MAAO,yFAGW,IAAAS,EAAAC,KAClBC,MAAM,uBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIL,EAAKM,SAAS,CAAEP,UAAWM,MAE3CH,MAAM,mBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIL,EAAKM,SAAS,CAAEf,MAAOc,uCAGhC,IAAAE,EACsBN,KAAKH,MAA1BC,EADDQ,EACCR,UAAWR,EADZgB,EACYhB,MACnB,IAAKQ,IAAcR,EACjB,OAAO,KAET,IAAMiB,EAAS,GAoBf,OAnBIT,GAAaR,GACfiB,EAAOC,KACL,IAAIC,IAAa,CACfpB,SACAS,YACAR,QACAoB,cAAe,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,MACjCC,oBAAqB,SAAAH,GAAC,OAAIA,EAAEC,WAAWG,UACvCC,gBAAiB,SAAAC,GAAC,OAAIA,EAAEC,QACxBC,cAAe,SAAAF,GAAC,OAAIA,EAAEG,MACtBC,iBAAkB,SAAAJ,GAAC,OAAIA,EAAEK,OACzBC,YAAY,EACZC,mBAAmB,EACnBC,mBAAoB,EACpBC,0BAA0B,KAM9BC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,iBAvEmB,WACzB,IAD+BC,EAG7BC,IAAYC,SAFD,CAAC,kBAAmB,OAAQ,OAAQ,QAI7C,CAACC,OAAOC,WAAYD,OAAOE,kBAC3BC,OAAWA,EAAW,KANKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAEvBU,OAFuB,GAQ/B,MAAO,CACLC,UAT6BJ,EAAA,GAU7BK,SAV6BL,EAAA,GAW7BM,KAX6Bb,EAEQa,MAqEfC,GAClBC,YAAY,EACZxC,OAAQA,GAERoB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAWC,qBA7EEC,iFA8BYC,aCxBbC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SAEjDD,SAASE,MAAT,sQDsHM,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.e6483332.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {StaticMap} from 'react-map-gl'\nimport DeckGL from 'deck.gl'\nimport FlowMapLayer from 'flowmap.gl'\nimport geoViewport from '@mapbox/geo-viewport'\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MapboxAccessToken\n\nconst getInitialViewport = () => {\n  const bbox = [5.956453645364537, 45.818, 10.492, 47.808]\n  const { center: [longitude, latitude], zoom } =\n    geoViewport.viewport(\n      bbox,\n      [window.innerWidth, window.innerHeight],\n      undefined, undefined, 512\n    )\n  return {\n    longitude,\n    latitude,\n    zoom,\n  }\n}\n\nconst colors = {\n  flows: {\n    max: '#137CBD',\n  },\n  locationAreas: {\n    outline: 'rgba(92,112,128,0.5)',\n    normal: 'rgba(187,187,187,0.5)',\n    selected: 'rgba(217,130,43,0.5)',\n  },\n}\n\n\n\nexport default class App extends Component {\n  state = {\n    locations: null,\n    flows: null,\n  }\n\n  componentDidMount() {\n    fetch('data/locations.json')\n      .then(response => response.json())\n      .then(json => this.setState({ locations: json }))\n\n    fetch('data/flows.json')\n      .then(response => response.json())\n      .then(json => this.setState({ flows: json }))\n  }\n\n  render() {\n    const { locations, flows } = this.state\n    if (!locations || !flows) {\n      return null\n    }\n    const layers = []\n    if (locations && flows) {\n      layers.push(\n        new FlowMapLayer({\n          colors,\n          locations,\n          flows,\n          getLocationId: l => l.properties.abbr,\n          getLocationCentroid: l => l.properties.centroid,\n          getFlowOriginId: f => f.origin,\n          getFlowDestId: f => f.dest,\n          getFlowMagnitude: f => f.count,\n          showTotals: true,\n          showLocationAreas: true,\n          locationCircleSize: 3,\n          varyFlowColorByMagnitude: true,\n        })\n      )\n    }\n\n    return (\n      <DeckGL\n        initialViewState={getInitialViewport()}\n        controller={true}\n        layers={layers}\n      >\n        <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} />\n      </DeckGL>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\ndocument.write(\n  `<a href=\"https://github.com/ilyabo/flowmap.gl-example\">\n    <img \n      style=\"position: absolute; top: 0; right: 0; border: 0;\" \n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" \n      alt=\"Fork me on GitHub\">\n   </a>\n `\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}